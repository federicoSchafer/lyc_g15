package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.model.*;

// ===== Símbolos terminales =====
terminal ASSIG, PLUS, SUB, MULT, DIV, OPEN_BRACKET, CLOSE_BRACKET, COMMA, SEMI;
terminal INTEGER_CONSTANT;
terminal IDENTIFIER;
terminal STRING_CONSTANT;
terminal INTEGER, BOOLEAN, DATECONVERTED;

// ===== No terminales =====
non terminal program;
non terminal decls, decl, var_decl, const_decl, id_list;
non terminal type;
non terminal sentence, assignment, expr, term, factor;

// Start symbol
start with program;

// ===========================
// Gramática
// ===========================

program ::= decls sentence SEMI
           {: System.out.println("[RULE] program -> decls sentence ;"); :} ;

decls ::= /* vacío */
        | decls decl
           {: System.out.println("[RULE] decls -> decls decl"); :} ;

decl ::= var_decl
       | const_decl
           {: System.out.println("[RULE] decl -> var_decl | const_decl"); :} ;

// Declaración de variable
var_decl ::= type id_list SEMI
             {: System.out.println("[RULE] var_decl -> type id_list ;"); :} ;

// Declaración de constante
const_decl ::= type IDENTIFIER ASSIG expr SEMI
               {: System.out.println("[RULE] const_decl -> type IDENTIFIER = expr ;"); :} ;

// Lista de identificadores
id_list ::= IDENTIFIER
           {: System.out.println("[RULE] id_list -> IDENTIFIER"); :}
         | id_list COMMA IDENTIFIER
           {: System.out.println("[RULE] id_list -> id_list , IDENTIFIER"); :} ;

// Tipos
type ::= INTEGER    {: System.out.println("[RULE] type -> Integer"); :}
       | BOOLEAN    {: System.out.println("[RULE] type -> Boolean"); :}
       | DATECONVERTED {: System.out.println("[RULE] type -> DateConverted"); :} ;

// Sentencias simples
sentence ::= assignment SEMI
            {: System.out.println("[RULE] sentence -> assignment ;"); :} ;

assignment ::= IDENTIFIER ASSIG expr
              {: System.out.println("[RULE] assignment -> IDENTIFIER = expr"); :} ;

// Expresiones
expr ::= expr PLUS term
       {: System.out.println("[RULE] expr -> expr + term"); :}
       | expr SUB term
       {: System.out.println("[RULE] expr -> expr - term"); :}
       | term
       {: System.out.println("[RULE] expr -> term"); :} ;

term ::= term MULT factor
       {: System.out.println("[RULE] term -> term * factor"); :}
       | term DIV factor
       {: System.out.println("[RULE] term -> term / factor"); :}
       | factor
       {: System.out.println("[RULE] term -> factor"); :} ;

factor ::= IDENTIFIER
         {: System.out.println("[RULE] factor -> IDENTIFIER"); :}
       | INTEGER_CONSTANT
         {: System.out.println("[RULE] factor -> INTEGER_CONSTANT"); :}
       | STRING_CONSTANT
         {: System.out.println("[RULE] factor -> STRING_CONSTANT"); :}
       | OPEN_BRACKET expr CLOSE_BRACKET
         {: System.out.println("[RULE] factor -> (expr)"); :} ;
