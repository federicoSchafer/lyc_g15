package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.model.*;

// ===== Símbolos terminales =====
terminal INTEGER; //2
terminal BOOLEAN;
terminal FLOAT;
terminal STRING; //5
terminal INIT;
terminal WHILE;
terminal IF;
terminal ELSE;
terminal READ; //10
terminal WRITE;
terminal AND;
terminal OR;
terminal NOT;
terminal EQUAL_EXP;
terminal TRIANG_AREA_MAX; //16

terminal ASSIG;
terminal PLUS; 
terminal SUB;
terminal MULT; //20
terminal DIV;
terminal LESS_THAN;
terminal GREATER_THAN;
terminal LESS_THAN_EQUAL;
terminal GREATER_THAN_EQUAL; 
terminal DOBLE_EQUAL;
terminal OPEN_PARENTHESIS;
terminal CLOSE_PARENTHESIS;
terminal OPEN_BRACE;
terminal CLOSE_BRACE; //30
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal COMMA; 
terminal SEMI;
terminal COLON;

terminal IDENTIFIER; //36
terminal INTEGER_CONSTANT;
terminal FLOAT_CONSTANT;
terminal STRING_CONSTANT;

// Terminal ficticio para precedencia unaria
terminal UMINUS; //?

// ===== No terminales =====
non terminal program;
non terminal statements, statement;
non terminal decl, var_decl, const_decl;
non terminal id_list;
non terminal type;
non terminal assignment;
non terminal expr, term, unary_expr, factor;
non terminal while, if, reader, write, equalexpressions, triangleareamaximum;
non terminal condition, simple_condition;

// ===== Precedencia =====
precedence left PLUS, SUB;
precedence left MULT, DIV;
precedence right UMINUS;

// ===== Símbolo inicial =====
start with program;

// ===========================
// Gramática
// ===========================

// ---- Programa ----
program ::= statements
           {: System.out.println("[RULE] program -> statements"); :}
          | decl statements
           {: System.out.println("[RULE] program -> decl statements"); :} ;

// ---- Lista de statements ----
statements ::= /* vacío */
             | statements statement
           {: System.out.println("[RULE] statements -> statements statement"); :} ;

// ---- Statement ----
statement ::= assignment
           {: System.out.println("[RULE] statement -> assignment"); :} ;

// ---- Declaraciones ----
decl ::= INIT OPEN_BRACE var_decl CLOSE_BRACE
           {: System.out.println("[RULE] decl -> INIT { var_decl }"); :} ;

// Declaración de variable
var_decl ::= id_list COLON type
             {: System.out.println("[RULE] var_decl -> id_list : type"); :}
            | id_list COLON type var_decl
             {: System.out.println("[RULE] var_decl -> id_list : type var_decl"); :} ;

// Declaración de constante
// todo

// ---- Lista de identificadores ----
id_list ::= IDENTIFIER:id
           {: System.out.println("[RULE] id_list -> IDENTIFIER"); :}
         | id_list:list COMMA IDENTIFIER:id
           {: System.out.println("[RULE] id_list -> id_list , IDENTIFIER"); :} ;

// ---- Tipos ----
type ::= INTEGER         {: System.out.println("[RULE] type -> Integer"); :}
       | FLOAT         {: System.out.println("[RULE] type -> Float"); :}
       | STRING         {: System.out.println("[RULE] type -> String"); :}
       | BOOLEAN         {: System.out.println("[RULE] type -> Boolean"); :} ;

// ---- Asignaciones ----
assignment ::= IDENTIFIER ASSIG expr
           {: System.out.println("[RULE] assignment -> IDENTIFIER := expr"); :} ;

// ---- Expresiones ----
expr ::= expr PLUS term
       {: System.out.println("[RULE] expr -> expr + term"); :}
       | expr SUB term
       {: System.out.println("[RULE] expr -> expr - term"); :}
       | term
       {: System.out.println("[RULE] expr -> term"); :} ;

// ---- Términos ----
term ::= term MULT unary_expr
       {: System.out.println("[RULE] term -> term * unary_expr"); :}
       | term DIV unary_expr
       {: System.out.println("[RULE] term -> term / unary_expr"); :}
       | unary_expr
       {: System.out.println("[RULE] term -> unary_expr"); :} ;

// ---- Expresiones unarias ----
unary_expr ::= SUB factor
              {: System.out.println("[RULE] unary_expr -> - factor"); :} %prec UMINUS
             | PLUS factor
              {: System.out.println("[RULE] unary_expr -> + factor"); :} %prec UMINUS
             | factor
              {: System.out.println("[RULE] unary_expr -> factor"); :} ;

// ---- Factores ----
factor ::= INTEGER_CONSTANT
         {: System.out.println("[RULE] factor -> INTEGER_CONSTANT"); :}
       | IDENTIFIER
         {: System.out.println("[RULE] factor -> IDENTIFIER"); :}
       | STRING_CONSTANT
         {: System.out.println("[RULE] factor -> STRING_CONSTANT"); :}
       | OPEN_PARENTHESIS expr CLOSE_PARENTHESIS
         {: System.out.println("[RULE] factor -> (expr)"); :} ;
